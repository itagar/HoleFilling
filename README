============================================================================
=                               Hole Filling                               =
=                                Itai Tagar                                =
============================================================================


Files:
	HoleFilling.cpp		- The Main file which runs the program.
	Pixel.h			- A header file for the Pixel Class.
	Pixel.cpp		- A file for the Pixel Class implementation.
	Hole.h			- A header file for the Hole Class.
	Hole.cpp		- A file for the Hole Class implementation.
	HoleException.h		- Exception Classes for the Hole Filling program.
	Makefile		- Makefile for this program.
	README			- This File.


Implementation Details:
	My implementation works as follows:
	After validating and setting all the parameters given by the user for the program, 
	the program reads the image from the given path (using openCV) and converting this
	image into a 2D-array of floats, this array is allocated dynamically on the Heap.
	Then, we search for a missing pixel, i.e. an index in the 2D-array with 
	value (-1). Once we found a missing pixel, we then find the entire hole in the image
	(as well as finding it's boundary) using simple BFS from the missing pixel with	
	the given pixel connectivity value. Note that if the image does not contain a hole,
	we won't find a pixel which satisfies that it's value is (-1) and then an Exception
	is thrown and the program ends. Now that we have the pixels that make up the hole
	and it's boundary we simply apply the fill as described in the exercise description.

	Note that I used Deep-Copy of the images in order that the marking/fill procedure
	will not alter the original image, in case the original image can be modified we could
	skip this copies and pass the original image as a parameter to the marking/fill function.

	For the ease of implementation I've created a Pixel class that encapsulate a single
	pixel in the image, as well as Hole class which represent a hole in the image.

	Regarding the hole itself. Any given image path that will be opened by openCV won't
	contain negative values. After consulting with the recruiting team from Lightricks,
	I've simply created a function which corrupt the image, and thus manually creating
	a hole with missing pixels in the image, and then continue the program procedure
	as described above. There is a simple hole generator which acts randomly and create
	a random hole at a random location in a shape of rectangle. Also there is a more
	specified hole generator function which receives an array of Pixels that describe
	the hole. (When using the random generator, the running time of the program is
	increased significantly). NOTE: In the main function there is an example for running
	the hole generator with an array of predefined Pixels, and there is a comment line
	which calls for the random generator.

	An example of using generateRandomHole:
		generateRandomHole(&image, rows, cols);

	An example of using generateDefinedHole:
		Pixel pixelArray[20] = {Pixel(20, 20), Pixel(20, 21), Pixel(20, 22),
		                        Pixel(20, 23), Pixel(20, 24), Pixel(21, 20),
		                        Pixel(21, 21), Pixel(21, 22), Pixel(21, 23),
		                        Pixel(21, 24), Pixel(22, 20), Pixel(22, 21),
		                        Pixel(22, 22), Pixel(22, 23), Pixel(22, 24),
		                        Pixel(23, 20), Pixel(23, 21), Pixel(23, 22),
		                        Pixel(23, 23), Pixel(24, 20)};
		generateDefinedHole(&image, pixelArray, 20);
	

Answers:
	4.	If there are m boundary pixels and n pixels inside the hole, then our algorithm
		perform for each pixel x inside the hole the value change according to the
		weighted formula. In this formula we have to iterate through every pixel in the
		boundary. So for every pixel in the hole we do O(m) calculations, and we have n
		pixels in the hole so we get total time of O(m*n).
		We note that m = O(n) since m <= 4*n in 4-connectivity and m <= 8*n in 8-connectivity
		So in terms of n, the complexity of the algorithm is O(n^2).
	5.	We can approximate the result in O(n) by applying the weighted function on a pixel x
		on some constant neighbour area instead of using all the pixels in the boundary.
		for every pixel x in the hole we can just use it's 4 or 8 neighbours, according to
		the selected connectivity, and use them to calculate the filled value for x.
		(Of course if one of x's neighbours is a missing pixel we ignore it). This gives us
		a constant time for every pixel x and thus we get an approximate solution in O(n).
		This is implemented in the function named: neighboursFillImageHole().
